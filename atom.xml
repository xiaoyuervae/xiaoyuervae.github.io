<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青春住了谁</title>
  
  <subtitle>只有真正了解自己想要什么，才能知道自己该干什么。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xiaoyuervae.cn/"/>
  <updated>2019-01-22T07:22:15.577Z</updated>
  <id>https://blog.xiaoyuervae.cn/</id>
  
  <author>
    <name>老鱼头</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式锁的应用</title>
    <link href="https://blog.xiaoyuervae.cn/posts/undefined/"/>
    <id>https://blog.xiaoyuervae.cn/posts/undefined/</id>
    <published>2019-01-22T15:17:09.000Z</published>
    <updated>2019-01-22T07:22:15.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="要解决什么问题？"><a href="#要解决什么问题？" class="headerlink" title="要解决什么问题？"></a>要解决什么问题？</h2><p>现在在互联网的场景中大家的服务应该都是进行分布式部署的，分布式锁和我们之前Java应用中的锁其实都是为了解决多线程的问题。只是说在以前单机部署情况下使用的如 <code>Synchronized</code>、<code>Lock</code> 等锁在分布式的场景下某些业务无法满足，需要我们使用分布式锁来解决这一分布式竞争的情况。</p><h2 id="分布式锁会出现哪样的一些问题？"><a href="#分布式锁会出现哪样的一些问题？" class="headerlink" title="分布式锁会出现哪样的一些问题？"></a>分布式锁会出现哪样的一些问题？</h2><h3 id="互斥（只有一个客户端能获取锁）"><a href="#互斥（只有一个客户端能获取锁）" class="headerlink" title="互斥（只有一个客户端能获取锁）"></a>互斥（只有一个客户端能获取锁）</h3><p>互斥是最基本的、在同一时刻只能有一个客户端能够获取到锁，这个通过数据库、<code>Redis</code>、<code>Zookeeper</code>等特性都能够保证。</p><h3 id="不能死锁"><a href="#不能死锁" class="headerlink" title="不能死锁"></a>不能死锁</h3><p>死锁、顾名思义，就是说锁一直都不被释放，导致其他线程或任务一直都阻塞在这里，永远都不能获取到锁（如果是阻塞锁可能会使任务一直堆积）。</p><p>不能死锁很多人也会回答说给我们的锁来设置一个过期时间（比如说<code>Redis</code>锁）</p><p>这边给一个我们线上出现死锁的情况，我们来看一下这段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, <span class="keyword">int</span> timeToLive)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeToLive &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        timeToLive = TTL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Long v = jedisCluster.incr(key);</span><br><span class="line">    <span class="keyword">if</span> (target.equals(v)) &#123;</span><br><span class="line">        jedisCluster.expire(key, timeToLive);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到这段代码中是使用<strong>JedisCluster.incr(key)</strong>来创建分布式锁的，如果说获取到锁了那么返回结果应该是1L，成功后便设置锁的过期时间，这段代码看起来是没问题，但是在我们线上的情况竟然发现了死锁！</p><p>这是什么情况呢，某天发现该分布式锁下面代码逻辑都没有再执行，到redis里面查看了该key的值发现竟然有7w多，明显是执行了7w多次<code>tryLock</code>最终还是没有能够获取到锁，但是难道一次代码逻辑需要执行这么多次吗？很明显不是，按道理来讲如果锁了一定时间后这个key应该是会过期的，我们的<code>timeToLive</code>设置的值是60s，不会说一直在这里不释放的。</p><p>后面查看应用日志发现我们的<code>redis</code>在某1s内突然失去了连接（具体原因不明）, 于是恍然大悟, 在我们<code>tryLock</code>的逻辑中是先设置key再去设置过期时间，这两者并不是一个原子性的操作，可能刚好在这个时间点我们设置好了key的值但是没来得及设置过期时间 <code>redis</code> 失去了连接，导致我们的过期时间设置失败，所以这个key一直没能够释放。</p><p>明白了原因我们就知道这种分布式锁的实现方式其实是存在明显漏洞的，要保证给锁设置值和过期时间是一个原子性的操作才能够保证不被死锁。</p><p>我们把这个方式直接改成了使用<code>redis</code>命令来设置:</p><blockquote><p>SET my:lock 随机值 NX PX 30000</p></blockquote><p>执行这个命令就 ok。</p><ul><li>NX：表示只有 key 不存在的时候才会设置成功。（如果此时 <code>redis</code> 中存在这个 key，那么设置失败，返回 nil）</li><li>PX 30000：意思是 30s 后锁自动释放。别人创建的时候如果发现已经有了就不能加锁了。</li></ul><h3 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h3><p>我这边理解的容错可能需要应对以下几种情况:</p><ul><li>分布式锁依赖的中间件不可用(如<code>Redis</code>、<code>Zookeeper</code>、<code>数据库</code>等)</li><li>应用突然宕机（包括应用发布过程）</li><li>中间件集群（如<code>Redis</code>集群中只要大部分节点创建了这把锁就可以，N个Redis节点，需要 <strong>(N/2 + 1)</strong> 个节点以上）</li><li>过期时间超时后不能让该线程解锁</li></ul><p>我这边讲一下最后一个点，也就是说如果分布式锁过期了但是该线程中的任务还没有结束，当该线程的执行逻辑结束之后其实之前他自己获得的锁已经被释放了，这时候它如果再去做解锁的操作其实是将其他线程获取的锁给释放掉了，这种情况肯定是会有问题的。</p><p>所以在分布式锁释放的时候我们必须保证一个线程释放的锁必须是这个线程获得的，针对<code>Redis</code>分布式锁来说我们可以使用<code>lua</code>脚本来做释放锁的操作:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除锁的时候，找到 key 对应的 value，跟自己传过去的 value 做比较，如果是一样的才删除。</span></span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">"get"</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">"del"</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里我们需要判断value，这个value是我们在<code>tryLock</code>的时候去创建的，我们可以使用<code>UUID</code>之类的随机数（要确保每次创建的都不会一致）来创建、然后在删除的时候去判断这个value，不相同说明不是该线程创建的。</p><h2 id="实现分布式锁的几种方式"><a href="#实现分布式锁的几种方式" class="headerlink" title="实现分布式锁的几种方式"></a>实现分布式锁的几种方式</h2><p>其实实现分布式锁的方式有很多种，基于<code>Redis</code>的我上面基本都介绍了，我这边着重讲一下基于<code>Zookeeper</code>来实现分布式锁。</p><p>zk 分布式锁，其实可以做的比较简单，就是某个节点尝试创建临时 <code>znode</code>，此时创建成功了就获取了这个锁；这个时候别的客户端来创建锁会失败，只能注册个监听器监听这个锁。释放锁就是删除这个 <code>znode</code>，一旦释放掉就会通知客户端，然后有一个等待着的客户端就可以再次重新加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zookeeper;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeperSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.zookeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.31.187:2181,192.168.31.19:2181,192.168.31.227:2181"</span>, <span class="number">50000</span>, <span class="keyword">new</span> ZooKeeperWatcher());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connectedSemaphore.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"ZooKeeper session established......"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分布式锁</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">acquireDistributedLock</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"/product-lock-"</span> + productId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zookeeper.create(path, <span class="string">""</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 相当于是给node注册一个监听器，去看看这个监听器是否存在</span></span><br><span class="line">                    Stat stat = zk.exists(path, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">this</span>.latch.await(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">                        <span class="keyword">this</span>.latch = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    zookeeper.create(path, <span class="string">""</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放掉一个分布式锁</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseDistributedLock</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"/product-lock-"</span> + productId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zookeeper.delete(path, -<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"release the lock for product[id="</span> + productId + <span class="string">"]......"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立zk session的watcher</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Receive watched event: "</span> + event.getState());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (KeeperState.SyncConnected == event.getState()) &#123;</span><br><span class="line">                connectedSemaphore.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.latch != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装单例的静态内部类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperSession instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> ZooKeeperSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeperSession <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeperSession <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化单例的便捷方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以采用另一种方式，创建临时顺序节点：</p><p>如果有一把锁，被多个人给竞争，此时多个人会排队，第一个拿到锁的人会执行，然后释放锁；后面的每个人都会去监听排在自己前面的那个人创建的 node 上，一旦某个人释放了锁，排在自己后面的人就会被 zookeeper 给通知，一旦被通知了之后，就 ok 了，自己就获取到了锁，就可以执行代码了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperDistributedLock</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line">    <span class="keyword">private</span> String locksRoot = <span class="string">"/locks"</span>;</span><br><span class="line">    <span class="keyword">private</span> String productId;</span><br><span class="line">    <span class="keyword">private</span> String waitNode;</span><br><span class="line">    <span class="keyword">private</span> String lockNode;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch connectedLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeperDistributedLock</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String address = <span class="string">"192.168.31.187:2181,192.168.31.19:2181,192.168.31.227:2181"</span>;</span><br><span class="line">            zk = <span class="keyword">new</span> ZooKeeper(address, sessionTimeout, <span class="keyword">this</span>);</span><br><span class="line">            connectedLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getState() == KeeperState.SyncConnected) &#123;</span><br><span class="line">            connectedLatch.countDown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.latch != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquireDistributedLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                waitForLock(waitNode, sessionTimeout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 传入进去的locksRoot + “/” + productId</span></span><br><span class="line">    <span class="comment">// 假设productId代表了一个商品id，比如说1</span></span><br><span class="line">    <span class="comment">// locksRoot = locks</span></span><br><span class="line">    <span class="comment">// /locks/10000000000，/locks/10000000001，/locks/10000000002</span></span><br><span class="line">            lockNode = zk.create(locksRoot + <span class="string">"/"</span> + productId, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">   </span><br><span class="line">            <span class="comment">// 看看刚创建的节点是不是最小的节点</span></span><br><span class="line">     <span class="comment">// locks：10000000000，10000000001，10000000002</span></span><br><span class="line">            List&lt;String&gt; locks = zk.getChildren(locksRoot, <span class="keyword">false</span>);</span><br><span class="line">            Collections.sort(locks);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(lockNode.equals(locksRoot+<span class="string">"/"</span>+ locks.get(<span class="number">0</span>)))&#123;</span><br><span class="line">                <span class="comment">//如果是最小的节点,则表示取得锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果不是最小的节点，找到比自己小1的节点</span></span><br><span class="line">  <span class="keyword">int</span> previousLockIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locks.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(lockNode.equals(locksRoot + “/” + locks.get(i))) &#123;</span><br><span class="line">             previousLockIndex = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">this</span>.waitNode = locks.get(previousLockIndex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">waitForLock</span><span class="params">(String waitNode, <span class="keyword">long</span> waitTime)</span> <span class="keyword">throws</span> InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        Stat stat = zk.exists(locksRoot + <span class="string">"/"</span> + waitNode, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.latch.await(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">this</span>.latch = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 删除/locks/10000000000节点</span></span><br><span class="line">            <span class="comment">// 删除/locks/10000000001节点</span></span><br><span class="line">            System.out.println(<span class="string">"unlock "</span> + lockNode);</span><br><span class="line">            zk.delete(lockNode, -<span class="number">1</span>);</span><br><span class="line">            lockNode = <span class="keyword">null</span>;</span><br><span class="line">            zk.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LockException</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LockException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于<code>Redis</code> 和 <code>Zk</code> 来实现分布式锁其实有一个最本质的区别:</p><ul><li>redis 分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能。</li><li>zk 分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小。</li></ul><p>另外一点就是，如果是 redis 获取锁的那个客户端 出现 bug 挂了，那么只能等待超时时间之后才能释放锁；而 zk 的话，因为创建的是临时 znode，只要客户端挂了，znode 就没了，此时就自动释放锁。</p><p>但是，在我们高并发的场景下，基于Zookeeper实现的分布式锁的<code>qps</code>不能太高，其性能是要低于<code>Redis</code>的，所以总的来说，基于<code>Zookeeper</code>和 <code>Redis</code> 实现的分布式锁各有优缺点，大家在选择的时候可以根据业务具体去看哪一种符合你的业务场景。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RocketMq 学习之核心参数</title>
    <link href="https://blog.xiaoyuervae.cn/posts/1044148734/"/>
    <id>https://blog.xiaoyuervae.cn/posts/1044148734/</id>
    <published>2018-12-10T22:53:23.000Z</published>
    <updated>2019-01-22T07:22:15.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>producerGroup</p></blockquote><p>生产者组名，一个服务默认只允许配置唯一一个生产组名。</p><blockquote><p>createTopicKey</p></blockquote><p>自动创建topic key。生产环境不建议使用，尽量是由公司的架构组提供统一对RocketMq的API进行二次封装，隐藏一些API。</p><blockquote><p>defaultTopicQueueNums</p></blockquote><p>一个topic下默认的消息队列，默认是4个</p><blockquote><p>compressMsgBodyHowmuch</p></blockquote><p>消息体自动压缩、默认为 4096 个字节、便于在网络中进行传输。</p><blockquote><p>retryTimesWhenSendFailed</p></blockquote><p>消息发送失败后重试的次数、可配置，这是针对于同步发送消息的，异步发送消息对应有另外的配置 <code>retryTimesWhenSendAsyncFailed</code>。</p><blockquote><p>retryAnotherBrokerWhenNotStoreOK</p></blockquote><p>如果在broker上存储失败可以对其他broker进行重试，默认为false</p><blockquote><p>maxMessageSize</p></blockquote><p>最大消息大小，默认为128k</p><blockquote><p>producer的配置项:</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bly1fy21g5h5gtj20ya0r6dq7" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="rocketmq" scheme="https://blog.xiaoyuervae.cn/tags/rocketmq/"/>
    
  </entry>
  
  <entry>
    <title>一次排查MongoDB CPU过高、服务无响应的问题</title>
    <link href="https://blog.xiaoyuervae.cn/posts/611001842/"/>
    <id>https://blog.xiaoyuervae.cn/posts/611001842/</id>
    <published>2018-12-02T14:59:38.000Z</published>
    <updated>2019-01-22T07:22:15.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><p>IM内的聊天记录等数据都存在Mongo DB中、最近手机短信一直收到持续不断的Apdex值比较低的告警，所以集中花时间看了一下到底是什么问题造成的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bly1fxsavmvgnlj20u01szwsl" alt="IMG_3045" title="">                </div>                <div class="image-caption">IMG_3045</div>            </figure><p>在我们的<code>Marvin</code>监控系统中看到出现的慢日志和相关错误日志中看到基本上都来自于同一个接口:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsenscdk3j21qw08c0uw" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>查看具体代码日志发现都是在执行查询M<code>mongo</code>的时候造成的超时。</p><h2 id="排查具体的问题"><a href="#排查具体的问题" class="headerlink" title="排查具体的问题"></a>排查具体的问题</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>在观察这个接口一段时间之后发现一个非常奇特的现象:</p><ul><li><p>该接口正常情况下的<code>rt</code>还是很正常的, 然后突然<code>rpm</code>值会激增,同时<code>rt</code>也会激增, 从正常情况下的 <code>5ms</code> 左右突然激增到 <code>2s</code> 的时间左右, 这对于一个正常的接口来说是不可接受的。</p><p>  <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsenseslhj21i80riagf" alt=""></p></li></ul><ul><li><p>观察了一下mongo机器的 <code>zabbix</code> 监控, 查看了一下mongo服务器在当时的状态, 发现除了机器的 <code>cpu load</code> 有稍微的波动之外, 磁盘IO、内存等数值都没有明显的上涨:</p><p>  <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsensdw8ij223m0i27cc" alt=""></p></li><li><p>观察了线上mongo本身的日志, 发现在rt上涨的过程中 <code>mongo</code> 服务器的连接数不断在上涨, 从平稳的连接数95开始上涨, 1s钟之内上涨到了1500左右的连接,同时在这段期间貌似是没有任何返回,从日志中可以看到一个连接的响应时间的开始到结束有些甚至达到了<strong>80s</strong>之久！(什么sql能查这么久?!)</p><p>  <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsensij3wj212t0kie1m" alt="从运维同学那边拿到的图"></p></li></ul><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>联系了运维的同学帮忙看一下到底是什么问题造成的, 因为运维同学最近比较忙, 恰巧碰到他负责双十二全链路压测, 而且他主要也是运维MySQL的经验比较多, 帮我们粗略看了一下认为是并发太高的问题造成的(突然一时间并发连接数暴涨)。一时之间也看不出来有什么大的问题。</p><p>和运维同学一起排查的过程中我猜想是不是由于部分SQL没有走索引, 导致全表扫描或者是查询效率特别慢造成的阻塞, 运维同学回答我说有可能, 为了验证这个想法我们查看了在那段时间内的服务端日志中打印出来的慢查询的sql, 发现sql实在太多, 随便拉了几条出来看:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command historymessage.$cmd <span class="string">command:</span> count &#123; <span class="string">count:</span> <span class="string">"of_history_message"</span>, <span class="string">query:</span> &#123; <span class="string">session:</span> <span class="string">"86690631_97553434"</span>, <span class="string">$and:</span> [ &#123; <span class="string">msgTime:</span> &#123; <span class="string">$lte:</span> <span class="number">1543226394744</span> &#125; &#125; ] &#125; &#125; plan</span><br><span class="line"><span class="string">Summary:</span> COUNT_SCAN &#123; <span class="string">session:</span> <span class="number">1.0</span>, <span class="string">msgTime:</span> <span class="number">-1.0</span> &#125; <span class="string">keyUpdates:</span><span class="number">0</span> <span class="string">writeConflicts:</span><span class="number">0</span> <span class="string">numYields:</span><span class="number">0</span> <span class="string">reslen:</span><span class="number">44</span> <span class="string">locks:</span>&#123; <span class="string">Global:</span> &#123; <span class="string">acquireCount:</span> &#123; <span class="string">r:</span> <span class="number">1</span> &#125; &#125;, <span class="string">MMAPV1Journal:</span> &#123; <span class="string">acquireCount:</span> &#123; <span class="string">r:</span> <span class="number">1</span> &#125; &#125;, <span class="string">Database:</span> &#123; <span class="string">acquireCount:</span> &#123; <span class="string">r:</span> <span class="number">1</span></span><br><span class="line"> &#125; &#125;, <span class="string">Collection:</span> &#123; <span class="string">acquireCount:</span> &#123; <span class="string">R:</span> <span class="number">1</span> &#125; &#125; &#125; <span class="number">71270</span>ms</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attribute">count</span>: <span class="string">"of_history_message"</span>, query: &#123; session: <span class="string">"86492947_95561724"</span>, $and: [ &#123; msgTime: &#123; $lte: <span class="number">1543235835000</span> &#125; &#125; ] &#125; &#125; <span class="selector-tag">plan</span></span><br><span class="line"><span class="selector-tag">Summary</span>: <span class="selector-tag">COUNT_SCAN</span> &#123; <span class="attribute">session</span>: <span class="number">1.0</span>, msgTime: -<span class="number">1.0</span> &#125; <span class="selector-tag">keyUpdates</span><span class="selector-pseudo">:0</span> <span class="selector-tag">writeConflicts</span><span class="selector-pseudo">:0</span> <span class="selector-tag">numYields</span><span class="selector-pseudo">:0</span> <span class="selector-tag">reslen</span><span class="selector-pseudo">:44</span> <span class="selector-tag">locks</span>:&#123; <span class="attribute">Global</span>: &#123; acquireCount: &#123; r: <span class="number">1</span> &#125; &#125;, <span class="selector-tag">MMAPV1Journal</span>: &#123; <span class="attribute">acquireCount</span>: &#123; r: <span class="number">1</span> &#125; &#125;, <span class="selector-tag">Database</span>: &#123; <span class="attribute">acquireCount</span>: &#123; r: <span class="number">1</span></span><br><span class="line"> &#125; &#125;, <span class="selector-tag">Collection</span>: &#123; <span class="attribute">acquireCount</span>: &#123; R: <span class="number">1</span> &#125; &#125; &#125; 151<span class="selector-tag">ms</span></span><br></pre></td></tr></table></figure><p>看了一下这些sql 并在mongo 上打印了一下执行计划, 都是很正常的sql, 并且都走了索引, 同时放到mongo 上执行速度也很快，这些sql应该都是因为前面的执行sql发生了阻塞之后造成响应慢的。</p><p>为了能够更好的进行排查我们从运维的同学那边要到了mongo服务器的机器权限, 方便进行更好的排查, 势必是要解决当前的这个问题。拿到服务器的权限之后发现mongo 的服务器配置还是相当强悍的：</p><blockquote><p>3台物理机, 逻辑CPU有48个, 内存有250G!</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsense2isj217m0oagrn" alt="CPU信息" title="">                </div>                <div class="image-caption">CPU信息</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsensa5orj213q04gjs6" alt="内存信息" title="">                </div>                <div class="image-caption">内存信息</div>            </figure><p>线上以Mongo副本集的方式部署, 这样的配置可谓是相当强悍, 所有mongo数据库中数据基本上都是加载到内存, 查询起来按理来说不会很慢的啊。</p><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><p>线上mongo默认的日志好像是好几个月的日志都打在了同一个文件中，日志量实在太大，连grep一下都很难，只能看近期的一些日志，所有要做排查实在是非常困难。</p><p>既然在mongo服务器上看不出问题那就从客户端出发吧，既然是在某一个时间点突然爆发出现速度慢的情况我是不是只要找出那个第一条响应慢的日志就可以知道到底是什么问题了。</p><p>于是我在客户端查询的接口上加上了具体的调用日志，打印出每条查询mongo的sql的开始时间和结束时间，并且把对应的sql打印出来，上线之后观察一段时间，我找到了那第一条执行速度慢的日志:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsentcwybj21h70u0wvi" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我发现这条查询语句非常奇怪，竟然是查询小于当前时间的数量, 奇怪归奇怪, 但是讲道理也不应该会那么慢的, 只是查询一个数量而已, 于是我把这条语句放到了mongo上查看了一下执行计划:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsensr0u7j20xp0glk7g" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不看不知道, 执行了一下发现竟然没有返回,并且出现了报错, 于是我立马意识到这条sql可能压根都没有索引, 查询小于当前时间所有的数据进行了一次全表扫描:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsensuy9gj20d501lglo" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>8000多万数据进行了一次无索引的count, 查看了一下collection上的索引:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsenswtr2j20fz0wnn0f" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>发现果然是没有这个索引！</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>发现了这个慢sql之后我非常好奇为什么会有这个sql出现, 同客户端的同学确认了一下之后发现这个sql的存在很有可能是由于参数的误传导致的, 因为这个接口中mongo查询的参数是由前端的同学传过来，sql经过参数的拼接而形成的。</p><p>为了验证我的想法我在业务的代码中增加了对这种sql形成的过滤(当然可能不止存在这一种没有走索引的慢sql)。</p><p>代码上线之后得到了惊人的效果, 慢sql的情况居然一去不复返了。接口的rt再也没有上过30ms, 说明暂时还没有其他的慢sql出现:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/e1417e4bgy1fxsensxo8jj21gq0pkjwo" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同时接口的rpm值也随之降下来了, 这时我意识到rpm的上涨应该是由于客户端超时之后进行了重试, 导致rpm值一下子暴涨, 所以mongo服务器的连接数才会一下子暴涨。</p><p>至此，问题终于得到了解决，这几天终于没有再收到告警，舒坦了。。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次mongo服务器问题的排查经历了大概三天左右的时间才最终把问题找到解决, 也是我经历的最久的一次问题排查了，整个过程是比较艰辛的，虽然过程是很简单，但是中间是绕了不少的弯路，也查阅了不少mongo相关的资料，发现mongo这块的资料真的是少，不过好在最后找到了问题所在。以前排查问题很少有这样的坚持力，基本上排查了一段时间后如果说真的发现不了问题的话就放弃了，所以对待这种排查起来比较困难的问题还是要懂得坚持，理清自己的思路。</p><p>通过这次排查我也发现我们之前在使用mongo的时候也有很多不规范的地方，mongo是一个性能很强悍的NoSQL数据库, 我们可能还没有真正的发挥出Mongo自身的性能。同时也有几个不规范的点:</p><ul><li>在业务中拼条件组成sql，可能大家为了代码的复用方便不愿去写多个SQL分别去做查询，但是这样造成了有些参数的缺失可能形成了一条性能极差的sql。</li><li>客户端的超时次数没有设置好，这次的问题也主要是由于客户端的超时次数太多了，其实一两条这种sql根本并不会造成严重的性能问题的，主要是因为超时重试造成了同一时间内多条这种低性能SQL阻塞了mongo的执行甚至拖垮整个mongo集群。</li><li>mongo服务的监控做的不够到位，这个问题也不好说，mongo在公司的使用毕竟还不够主流，相关工具的支持也很不完善，出现了问题没有能够进行及时的反馈，导致这个问题在线上出现了很久。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="mongo" scheme="https://blog.xiaoyuervae.cn/tags/mongo/"/>
    
      <category term="cpu" scheme="https://blog.xiaoyuervae.cn/tags/cpu/"/>
    
  </entry>
  
  <entry>
    <title>记一次排查线上CPU飚高的问题</title>
    <link href="https://blog.xiaoyuervae.cn/posts/1407851176/"/>
    <id>https://blog.xiaoyuervae.cn/posts/1407851176/</id>
    <published>2018-11-22T22:08:23.000Z</published>
    <updated>2019-01-22T07:22:15.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="记一次排查线上机器CPU飙升的问题"><a href="#记一次排查线上机器CPU飙升的问题" class="headerlink" title="记一次排查线上机器CPU飙升的问题"></a>记一次排查线上机器CPU飙升的问题</h1><p>最近我们的报表系统经常受到短信和邮件告警。</p><p>由于这个服务是专门用来做报表导出的、每天在跑各种报表任务、做XML解析，很多情况下还是多个任务在跑的，所以之前也没怎么关心，运维也反馈过告警有点频繁。</p><p>安排组里相关同学看了一下，也做了一些导出的限制，但是效果好像不是很好。</p><p>昨天早上系统疯狂告警、从8点钟开始告警，然后看了一下相关的问题。下面是具体的排查过程</p><h3 id="查看机器相关状态"><a href="#查看机器相关状态" class="headerlink" title="查看机器相关状态"></a>查看机器相关状态</h3><p>在监控系统中查看了一下机器的CPU和内存的状态:</p><p>机器整天的CPU占用状态达到了90%、初步判断有相关线程在进行相关耗资源的操作（可能是死循环、频繁IO等）</p><p>于是打算到机器上查看当前占用CPU资源的线程。</p><h3 id="使用Arthas的thread命令查看线程占用资源状态"><a href="#使用Arthas的thread命令查看线程占用资源状态" class="headerlink" title="使用Arthas的thread命令查看线程占用资源状态"></a>使用Arthas的<code>thread</code>命令查看线程占用资源状态</h3><p><code>arthas</code>是Alibaba开源的Java诊断利器、应该是今年上半年开源的，使用起来非常方便。这里贴出来github地址: <a href="https://github.com/alibaba/arthas/blob/master/README_CN.md" target="_blank" rel="noopener">Arthas</a></p><p>使用<code>thread</code> 命令查看当前线程信息、查看线程的堆栈。</p><p>我装好arthas之后使用thread命令查看了当前最忙的5个线程并打印堆栈, 发现占用CPU资源最高的是这个线程<code>pool-9-thread-1</code>(开发竟然没对线程池进行命名orz…):</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6b6l22mj20we0o8do2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个线程竟然整整占了一个核心的资源（机器配置4C 4G）</p><p>同时我们能在打印的堆栈中看到如下信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- locked java.io.FileNotFoundException</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Number of locked synchronizers = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>说明当前线程阻塞住了其他线程、应用卡主了，通常是由于线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。</p><h3 id="定位相关代码、分析问题原因"><a href="#定位相关代码、分析问题原因" class="headerlink" title="定位相关代码、分析问题原因"></a>定位相关代码、分析问题原因</h3><p><img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6cgg7vej20jh0ckmze.jpg" alt=""></p><p>找到问题出现的代码在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc = DocumentHelper.parseText(message.getXml)</span><br></pre></td></tr></table></figure><p>先不要吐槽代码写的好不好，当时看到这个就有点懵逼了，这只是一句正常的XML解析的逻辑，用了dom4j里面的解析文本的方法，怎么就能够把CPU跑满呢？</p><p>带着问题我看了一下里面的具体实现, 里面大体的逻辑是先去获取XMLReader, 即选取XML解析器，然后对XML进行解析。我们看到线程打印的堆栈最终是出现了<code>FileNotFoundException</code>, 那为什么会出现这个异常呢?</p><h3 id="JDK设计模式-Service-Provider机制（SPI）"><a href="#JDK设计模式-Service-Provider机制（SPI）" class="headerlink" title="JDK设计模式 - Service Provider机制（SPI）"></a>JDK设计模式 - Service Provider机制（SPI）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6cztd18j20cf0bc0sw.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>为什么要说这个呢，因为在上面的选取XML解析器的过程中就用到了这个机制，抱着好奇的心态我debug了一下这个parseText代码, 在选取 XML 解析器的代码中:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6ef2g5rj20mj054aao.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个<code>FactoryFinder.find()</code>是寻找XML解析器的逻辑:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6eugituj20e80a03yu.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">find</span><span class="params">(String factoryId, String fallbackClassName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        dPrint(<span class="string">"find factoryId ="</span> + factoryId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Use the system property first</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String systemProp = ss.getSystemProperty(factoryId);</span><br><span class="line">            <span class="keyword">if</span> (systemProp != <span class="keyword">null</span>) &#123;                </span><br><span class="line">                dPrint(<span class="string">"found system property, value="</span> + systemProp);</span><br><span class="line">                <span class="keyword">return</span> newInstance(systemProp, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug) se.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// try to read from $java.home/lib/jaxp.properties</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String factoryClassName = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (cacheProps) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">                        String configFile = ss.getSystemProperty(<span class="string">"java.home"</span>) + </span><br><span class="line">                        File.separator+</span><br><span class="line">                            <span class="string">"lib"</span> + File.separator + <span class="string">"jaxp.properties"</span>;</span><br><span class="line">                        File f = <span class="keyword">new</span> File(configFile);</span><br><span class="line">                        firstTime = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (ss.doesFileExist(f)) &#123;</span><br><span class="line">                            dPrint(<span class="string">"Read properties file "</span>+f);</span><br><span class="line">                            cacheProps.load(ss.getFileInputStream(f));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            factoryClassName = cacheProps.getProperty(factoryId);            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (factoryClassName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dPrint(<span class="string">"found in $java.home/jaxp.properties, value="</span> + </span><br><span class="line">                factoryClassName);</span><br><span class="line">                <span class="keyword">return</span> newInstance(factoryClassName, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug) ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Try Jar Service Provider Mechanism</span></span><br><span class="line">        Object provider = findJarServiceProvider(factoryId);</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> provider;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fallbackClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationError(</span><br><span class="line">                <span class="string">"Provider for "</span> + factoryId + <span class="string">" cannot be found"</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dPrint(<span class="string">"loaded from fallback value: "</span> + fallbackClassName);</span><br><span class="line">        <span class="keyword">return</span> newInstance(fallbackClassName, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总共是下面四步:</p><p>第一步： 检查系统属性（systemProperty）是否设置了javax.xml.parsers.SAXParserFactory  属性值，如果设置了，就使用设置的属性值来返回SAXParserFactory 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String systemProp = ss.getSystemProperty(factoryId);         </span><br><span class="line"><span class="keyword">if</span> (systemProp != <span class="keyword">null</span>) &#123;                </span><br><span class="line">       dPrint(<span class="string">"found system property, value="</span> + systemProp);</span><br><span class="line">       <span class="keyword">return</span> newInstance(systemProp, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若没找到，进行第二步</p><p>第二步：检查java.home/lib/jaxp.properties 属性配置文件中是否有javax.xml.parsers.SAXParserFactory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// try to read from $java.home/lib/jaxp.properties</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String factoryClassName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cacheProps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">                String configFile = ss.getSystemProperty(<span class="string">"java.home"</span>) + File.separator +</span><br><span class="line">                    <span class="string">"lib"</span> + File.separator + <span class="string">"jaxp.properties"</span>;</span><br><span class="line">                File f = <span class="keyword">new</span> File(configFile);</span><br><span class="line">                firstTime = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (ss.doesFileExist(f)) &#123;</span><br><span class="line">                    dPrint(<span class="string">"Read properties file "</span>+f);</span><br><span class="line">                    cacheProps.load(ss.getFileInputStream(f));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    factoryClassName = cacheProps.getProperty(factoryId);</span><br></pre></td></tr></table></figure><p>有则返回，无则进入第三步</p><p>第三步：    使用jar包的Service Provider机制，加载工厂类。也就是说，查找所有加载的jar包中META-INF/services目录下的配置文件，文件名为 javax.xml.parsers.SAXParserFactory。文件的内容就是该jar包内提供的类实例。比如xercesImple-2.x.x.jar提供的org.apache.xerces.jaxp.SAXParserFactoryImpl.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try Jar Service Provider Mechanism</span></span><br><span class="line">Object provider = findJarServiceProvider(factoryId);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果找不到，则进入最后第四步，使用默认的配置<br>第四步：使用系统默认的工厂类：</p><p>com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fallbackClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationError(</span><br><span class="line">        <span class="string">"Provider for "</span> + factoryId + <span class="string">" cannot be found"</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dPrint(<span class="string">"loaded from fallback value: "</span> + fallbackClassName);</span><br><span class="line"><span class="keyword">return</span> newInstance(fallbackClassName, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>在没有进行任何配置以及使用第三方jar包的情况下，最终程序都会走到第四步，返回系统默认的工厂类。</p><h3 id="得出结论"><a href="#得出结论" class="headerlink" title="得出结论"></a>得出结论</h3><blockquote><p>刚好我们的代码就是走到了这里面的逻辑, 寻找XML解析器里面的逻辑上面四步都走了，然后返回默认的工厂类, 且每次都会去通过<code>SPI</code>到加载的jar包中寻找文件, 找不到便会 lock 住FileNotFoundException, 执行一次这个代码可能还好, 但是这段导报表的逻辑是需要循环差不多9w次！！！</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6fgbwomj212801i74w.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>9w次不断的遍历jar包寻找文件，然后不断的抛出 FileNotFoundException, 怪不得会把CPU飙升到90%。</p><p>其实我也在想为什么遍历完一次之后这边的解析逻辑中为什么不会把解析后的逻辑缓存一份，下次不用再去寻找这个文件，有点困惑、、、</p><h3 id="提出解决办法、进行尝试"><a href="#提出解决办法、进行尝试" class="headerlink" title="提出解决办法、进行尝试"></a>提出解决办法、进行尝试</h3><p>找到问题之后问题就比较好解决了，主要是因为去使用SPI机制寻找jar文件的过程会比较消耗CPU，<br>我们只要不让他去寻找，早先设置好默认的工厂类就好了。</p><p>可选择的方法应该有如下四种:</p><p>1.在运行java时，通过设置系统属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -D javax.xml.parsers.SAXParserFactory=<span class="keyword">new</span> com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl</span><br></pre></td></tr></table></figure></p><p>2.方法二:在程序中调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(“javax.xml.parsers.SAXParserFactory”,” com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl”)</span><br></pre></td></tr></table></figure></p><p>  来设定实际的XML解析器.</p><p>3.方法三:编写一个jaxp.properties文件，在其中加入如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl</span><br></pre></td></tr></table></figure><p>  再将此文件放入JAVA_HOME/lib/下</p><p> 4.方法四:在打得jar包下，在目录META-INF/下新建一个services目录，在此目录新建一个文件名为</p><p><code>javax.xml.parsers.SAXParserFactory</code></p><p>的文件，文件内容写上实际使用的解析器类，如写</p><p><code>com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl</code></p><p>，这样在加载jar包之后，就会找到这个xml解析工厂。</p><p>最终我这边为了方便采取了第二种方式:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6dhoowcj20np0bljsx.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="上线验证结果"><a href="#上线验证结果" class="headerlink" title="上线验证结果"></a>上线验证结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/e1417e4bgy1fxh6guj8cmj20rs086aas.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上面是上线后第二天观察到的机器load情况，可以看到有很明显的改善！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这次排查问题，我对JAXP有一个比较深的了解，其实，JAVA中有许多这种思想（Service Provider）的做法，这种思想，，就是平台无关性，发展到不依赖于具体的实现。</p><p>如我们熟悉的JNDI，JDBC，JAXP等。JNDI是抽像各种目录服务操作的类库，因为目录服务器厂商太多了，如SUN公司的ldapsdk, 还有novell公司等等。JDBC是抽像各种数据库操作的类库，因为数据库厂商也太多了，如ORACLE，SQLSERVER，MYSQL，INFORMIX等等。JAXP就是抽像各种XML解析器和转换器产品的类库，因为XML解析器和转换器产品够多的了。sun公司自己实现的HttpServer也是基于Service Provide机制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.xiaoyuervae.cn/tags/java/"/>
    
  </entry>
  
</feed>
